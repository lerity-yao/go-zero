package rabbitmqgen

import (
	"fmt"
	"strings"

	"github.com/lerity-yao/go-zero/tools/cztctl/api/gogen"
	"github.com/lerity-yao/go-zero/tools/cztctl/api/spec"
	"github.com/lerity-yao/go-zero/tools/cztctl/config"
	"github.com/lerity-yao/go-zero/tools/cztctl/internal/version"
	"github.com/lerity-yao/go-zero/tools/cztctl/util/format"
	"github.com/lerity-yao/go-zero/tools/cztctl/util/pathx"
	"github.com/lerity-yao/go-zero/tools/cztctl/vars"
	"github.com/zeromicro/go-zero/core/collection"
)

const (
	listenerFilename = "listeners"
	listenerTemplate = `// Code generated by cztctl. DO NOT EDIT.
// cztctl {{.version}}

package handler

import (
	"context"
	{{.ImportPackages}}
)

func RegisterHandlers(server *service.ServiceGroup, serverCtx *svc.ServiceContext) {
	ctx := context.Background()
	{{.ListenerAdditions}}
}
`
)

func genListener(dir, rootPkg string, cfg *config.Config, api *spec.ApiSpec) error {

	listenerFileName, err := format.FileNamingFormat(cfg.NamingFormat, listenerFilename)
	if err != nil {
		return err
	}

	listenerAdditionNames := getListenerAdditions(api)

	imports := getListenerImports(api, rootPkg)

	return gogen.GenFile(gogen.FileGenConfig{
		Dir:             dir,
		Subdir:          handlerDir,
		Filename:        listenerFileName + ".go",
		TemplateName:    "listenerTemplate",
		Category:        category,
		TemplateFile:    listenerTemplateFile,
		BuiltinTemplate: listenerTemplate,
		Data: map[string]any{
			"ImportPackages":    strings.Join(imports, "\n"),
			"ListenerAdditions": strings.Join(listenerAdditionNames, "\n"),
			"version":           version.BuildVersion,
		},
	})
}

func getListenerImports(api *spec.ApiSpec, parentPkg string) []string {
	importNames := collection.NewSet[string]()
	importNames.Add(fmt.Sprintf("\"%s%s\"", vars.ProjectOpenSourceURL, "/core/service"),
		fmt.Sprintf("\"%s\"", pathx.JoinPackages(parentPkg, contextDir)))

	for _, g := range api.Service.Groups {
		for _, h := range g.Routes {
			handlerPath := getHandlerFolderPath(g, h)
			pkgName := handlerPath[strings.LastIndex(handlerPath, "/")+1:]
			importNames.Add(fmt.Sprintf("\"%s\"", pathx.JoinPackages(parentPkg, handlerDir, pkgName)))
		}
	}

	return importNames.Keys()
}

func getListenerAdditions(api *spec.ApiSpec) []string {
	listenerAdditionNames := collection.NewSet[string]()
	for _, g := range api.Service.Groups {
		for _, h := range g.Routes {
			handler := getHandlerName(h)
			handlerPath := getHandlerFolderPath(g, h)
			pkgName := handlerPath[strings.LastIndex(handlerPath, "/")+1:]
			if handlerPath != handlerDir {
				handler = strings.Title(handler)
			}

			l := fmt.Sprintf("server.Add(%s.%s(ctx, serverCtx))",
				pkgName, handler)
			listenerAdditionNames.Add(l)
		}
	}

	return listenerAdditionNames.Keys()
}
